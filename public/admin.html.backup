<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Configuration</title>
  <link rel="stylesheet" href="styles.css">
  <style>
    .admin-container {
      max-width: 800px;
      margin: 50px auto;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .login-container {
      max-width: 400px;
      margin: 100px auto;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .login-header {
      text-align: center;
      margin-bottom: 30px;
    }

    .login-header h1 {
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .error-message {
      background: rgba(255, 107, 107, 0.2);
      border: 1px solid #ff6b6b;
      color: #ff6b6b;
      padding: 12px;
      border-radius: 10px;
      margin-bottom: 20px;
      display: none;
    }
    
    .admin-header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    .admin-header h1 {
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      color: #4ecdc4;
      margin-bottom: 8px;
      font-weight: bold;
    }
    
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 12px;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      color: #ffffff;
      font-size: 16px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .form-group textarea {
      min-height: 80px;
      resize: vertical;
    }
    
    .form-group input:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #4ecdc4;
      box-shadow: 0 0 0 2px rgba(78, 205, 196, 0.2);
    }
    
    .form-section {
      background: rgba(255, 255, 255, 0.02);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 25px;
      margin-bottom: 25px;
    }
    
    .form-section h3 {
      color: #4ecdc4;
      margin-top: 0;
      margin-bottom: 20px;
    }
    
    .btn-container {
      display: flex;
      gap: 15px;
      margin-top: 30px;
    }
    
    .btn {
      flex: 1;
      padding: 15px;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-primary {
      background: linear-gradient(45deg, #4ecdc4, #44a9a0);
      color: #ffffff;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(78, 205, 196, 0.3);
    }
    
    .btn-secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .btn-secondary:hover {
      background: rgba(255, 255, 255, 0.15);
    }
    
    .message {
      padding: 15px;
      border-radius: 10px;
      margin-bottom: 20px;
      display: none;
    }
    
    .message.success {
      background: rgba(78, 205, 196, 0.1);
      border: 1px solid rgba(78, 205, 196, 0.3);
      color: #4ecdc4;
    }
    
    .message.error {
      background: rgba(255, 107, 107, 0.1);
      border: 1px solid rgba(255, 107, 107, 0.3);
      color: #ff6b6b;
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 20px;
      color: #4ecdc4;
    }
    
    .auth-prompt {
      background: rgba(255, 255, 255, 0.05);
      padding: 30px;
      border-radius: 15px;
      text-align: center;
    }
    
    .auth-prompt input {
      width: 100%;
      max-width: 300px;
      padding: 12px;
      margin: 20px auto;
      display: block;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      color: #ffffff;
      font-size: 16px;
      text-align: center;
    }
    
    .calculated-info {
      background: rgba(78, 205, 196, 0.05);
      padding: 10px;
      border-radius: 8px;
      margin-top: 8px;
      font-size: 14px;
      color: #4ecdc4;
    }
  </style>
</head>
<body>
  <div class="container">
    <a href="/" class="back-link">‚Üê Back to Event</a>
    
    <div class="admin-container">
      <div class="admin-header">
        <h1>üîß Admin Configuration</h1>
        <p>Manage event details and settings</p>
      </div>
      
      <div id="auth-section" class="auth-prompt" style="display: none;">
        <h2>Authentication Required</h2>
        <p>Please enter the admin password to continue</p>
        <input type="password" id="admin-password" placeholder="Admin Password">
        <button class="btn btn-primary" onclick="authenticate()" style="max-width: 200px; margin: 10px auto; display: block;">
          Login
        </button>
        <div id="auth-error" class="message error" style="max-width: 400px; margin: 20px auto;"></div>
      </div>
      
      <div id="config-section" style="display: none;">
        <div id="message" class="message"></div>
        <div id="loading" class="loading">Saving changes...</div>
        
        <form id="config-form">
          <div class="form-section">
            <h3>üìÖ Event Information</h3>
            
            <div class="form-group">
              <label style="display: flex; align-items: center; gap: 10px; cursor: pointer;">
                <input type="checkbox" id="tbd-mode" style="width: auto; cursor: pointer;">
                <span>üö´ TBD Mode - Event Date Not Yet Confirmed (Disables Ticket Sales)</span>
              </label>
              <div style="font-size: 14px; color: rgba(255, 255, 255, 0.6); margin-top: 8px;">
                When enabled, visitors will see "TBD" instead of the event date and will not be able to purchase tickets.
              </div>
            </div>
            
            <div class="form-group">
              <label for="event-name">Event Name</label>
              <input type="text" id="event-name" required>
            </div>
            
            <div class="form-group">
              <label for="event-date">Event Date</label>
              <input type="date" id="event-date" required>
              <div id="day-of-week" class="calculated-info"></div>
            </div>
            
            <div class="form-group">
              <label for="event-time">Event Time</label>
              <input type="text" id="event-time" placeholder="e.g., 7:00 PM" required>
            </div>
            
            <div class="form-group">
              <label for="event-address">Event Address</label>
              <input type="text" id="event-address" required>
            </div>
            
            <div class="form-group">
              <label for="event-description">Event Description</label>
              <textarea id="event-description" required></textarea>
            </div>
          </div>
          
          <div class="form-section">
            <h3>üéüÔ∏è Ticketing Settings</h3>
            
            <div class="form-group">
              <label for="ticket-price">Ticket Price (USD)</label>
              <input type="number" id="ticket-price" step="0.01" min="0" required>
            </div>
            
            <div class="form-group">
              <label for="min-quantity">Minimum Quantity</label>
              <input type="number" id="min-quantity" min="1" required>
            </div>
            
            <div class="form-group">
              <label for="max-quantity">Maximum Quantity</label>
              <input type="number" id="max-quantity" min="1" required>
            </div>
          </div>
          
          <div class="form-section">
            <h3>üìß Email Settings</h3>
            
            <div class="form-group">
              <label for="email-from">From Email Address</label>
              <input type="email" id="email-from" required>
            </div>
            
            <div class="form-group">
              <label for="email-name">From Name</label>
              <input type="text" id="email-name" required>
            </div>
          </div>
          
          <div class="btn-container">
            <button type="button" class="btn btn-secondary" onclick="loadConfig()">
              Reset Changes
            </button>
            <button type="submit" class="btn btn-primary">
              Save Configuration
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    let adminPassword = '';
    let isAuthenticated = false;
    
    // Check if already authenticated
    window.onload = function() {
      // Check session storage for password
      const storedPassword = sessionStorage.getItem('adminPassword');
      if (storedPassword) {
        adminPassword = storedPassword;
        verifyAndLoadConfig();
      } else {
        document.getElementById('auth-section').style.display = 'block';
      }
    };
    
    async function authenticate() {
      const password = document.getElementById('admin-password').value;
      const authError = document.getElementById('auth-error');
      
      if (!password) {
        authError.style.display = 'block';
        authError.textContent = 'Please enter a password';
        return;
      }
      
      try {
        const response = await fetch('/api/admin/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password })
        });
        
        const result = await response.json();
        
        if (result.success) {
          adminPassword = password;
          sessionStorage.setItem('adminPassword', password);
          isAuthenticated = true;
          authError.style.display = 'none';
          loadConfig();
        } else {
          authError.style.display = 'block';
          authError.textContent = 'Invalid password. Please try again.';
        }
      } catch (error) {
        authError.style.display = 'block';
        authError.textContent = 'Authentication failed: ' + error.message;
      }
    }
    
    async function verifyAndLoadConfig() {
      const response = await fetch('/api/admin/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password: adminPassword })
      });
      
      const result = await response.json();
      
      if (result.success) {
        isAuthenticated = true;
        loadConfig();
      } else {
        sessionStorage.removeItem('adminPassword');
        document.getElementById('auth-section').style.display = 'block';
      }
    }
    
    async function loadConfig() {
      const authSection = document.getElementById('auth-section');
      const configSection = document.getElementById('config-section');
      
      try {
        const response = await fetch('/api/config');
        
        if (!response.ok) {
          throw new Error('Failed to load configuration');
        }
        
        const data = await response.json();
        
        // Show config section, hide auth
        authSection.style.display = 'none';
        configSection.style.display = 'block';
        
        // Populate form
        document.getElementById('tbd-mode').checked = data.event.tbdMode || false;
        document.getElementById('event-name').value = data.event.name;
        
        // Convert "October 20, 2025" format back to "2025-10-20" for date input
        // Use the raw config date which should be in YYYY-MM-DD format
        const configResponse = await fetch('/api/config-raw');
        const rawConfig = configResponse.ok ? await configResponse.json() : null;
        
        if (rawConfig && rawConfig.event.date) {
          document.getElementById('event-date').value = rawConfig.event.date;
        } else {
          // Fallback: try to parse the formatted date
          const dateStr = data.event.date; // e.g., "October 20, 2025"
          const dateParts = dateStr.split(' ');
          if (dateParts.length === 3) {
            const month = new Date(Date.parse(dateParts[0] + " 1, 2000")).getMonth() + 1;
            const day = dateParts[1].replace(',', '');
            const year = dateParts[2];
            document.getElementById('event-date').value = `${year}-${month.toString().padStart(2, '0')}-${day.padStart(2, '0')}`;
          }
        }
        
        updateDayOfWeek();
        
        document.getElementById('event-time').value = data.event.time;
        document.getElementById('event-address').value = data.event.address;
        document.getElementById('event-description').value = data.event.description || '';
        
        document.getElementById('ticket-price').value = data.ticketing.price;
        document.getElementById('min-quantity').value = data.ticketing.minQuantity;
        document.getElementById('max-quantity').value = data.ticketing.maxQuantity;
        
        document.getElementById('email-from').value = data.event.fromAddress || 'info@wizardmakepotion.com';
        document.getElementById('email-name').value = data.event.fromName || data.event.name;
        
        // Load actual config with raw date format
        const rawResponse = await fetch(window.location.origin + '/config.json');
        if (rawResponse.ok) {
          const rawData = await rawResponse.json();
          if (rawData.event.date) {
            document.getElementById('event-date').value = rawData.event.date;
            updateDayOfWeek();
          }
          if (rawData.email) {
            document.getElementById('email-from').value = rawData.email.fromAddress;
            document.getElementById('email-name').value = rawData.email.fromName;
          }
        }
        
      } catch (error) {
        console.error('Error loading config:', error);
        showMessage('Failed to load configuration: ' + error.message, 'error');
      }
    }
    
    function updateDayOfWeek() {
      const dateInput = document.getElementById('event-date');
      const dayDisplay = document.getElementById('day-of-week');
      
      if (dateInput.value) {
        const date = new Date(dateInput.value + 'T00:00:00');
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        dayDisplay.textContent = `Day of week: ${days[date.getDay()]}`;
        dayDisplay.style.display = 'block';
      } else {
        dayDisplay.style.display = 'none';
      }
    }
    
    document.getElementById('event-date').addEventListener('change', updateDayOfWeek);
    
    document.getElementById('config-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const loading = document.getElementById('loading');
      const submitBtn = e.target.querySelector('button[type="submit"]');
      
      loading.style.display = 'block';
      submitBtn.disabled = true;
      
      const config = {
        event: {
          name: document.getElementById('event-name').value,
          date: document.getElementById('event-date').value,
          time: document.getElementById('event-time').value,
          address: document.getElementById('event-address').value,
          description: document.getElementById('event-description').value,
          tbdMode: document.getElementById('tbd-mode').checked
        },
        ticketing: {
          price: parseFloat(document.getElementById('ticket-price').value),
          minQuantity: parseInt(document.getElementById('min-quantity').value),
          maxQuantity: parseInt(document.getElementById('max-quantity').value),
          currency: 'usd'
        },
        email: {
          fromAddress: document.getElementById('email-from').value,
          fromName: document.getElementById('email-name').value
        }
      };
      
      try {
        const response = await fetch('/api/config', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Admin-Password': adminPassword
          },
          body: JSON.stringify(config)
        });
        
        if (!response.ok) {
          throw new Error('Failed to save configuration');
        }
        
        showMessage('Configuration saved successfully! Changes are now live.', 'success');
      } catch (error) {
        console.error('Error saving config:', error);
        showMessage('Failed to save configuration: ' + error.message, 'error');
      } finally {
        loading.style.display = 'none';
        submitBtn.disabled = false;
      }
    });
    
    function showMessage(text, type) {
      const messageDiv = document.getElementById('message');
      messageDiv.textContent = text;
      messageDiv.className = 'message ' + type;
      messageDiv.style.display = 'block';
      
      setTimeout(() => {
        messageDiv.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>
